
#define _CRT_SECURE_NO_WARNINGS
#include <gl/glew.h>  // A cross-platform open-source C/C++ extension loading library
#include <stdlib.h>
#include <gl/freeglut.h>   // Handle the window-managing operations
#include <iostream>
#include <conio.h>

using namespace std;


#include <math.h>
// Approximation of PI 
#define PI 3.1415926535898

// Macro for sin & cos in degrees 
#define Cos(th) cos(PI/180*(th))
#define Sin(th) sin(PI/180*(th))

// Globals varibles
double dim = 7; // Dimension of projection box 

GLuint Tex1; // buffers
char path1[] = "C:/Users/hp/source/repos/Project1/pyrr.bmp";

// Various global state 
int th = -25;  // theta is y-angle 
int ph = 15;   // phi is  x-angle 
int fov = 70;  // Field of view angle 
int asp = 1;  // aspect ratio 

			  //Aim of camera lens 
float ecX = -0.4;
float ecZ = -0.2;
float ecY = 0.0;

// Sets the projection
GLuint LoadTexture(const char * filename, int width, int height)
{
	GLuint texture;
	unsigned char * data; //pointer
	FILE * file;

	//The following code will read in our RAW file

	fopen_s(&file, filename, "rb");

	if (file == NULL)
	{
		cout << "Unable to open the image file" << endl << "Program will exit :(" << endl;
		exit(0);
		return 0;
	}

	data = (unsigned char *)malloc(width * height * 3);
	fread(data, width * height * 3, 1, file);

	fclose(file);


	// reorder the image colors to RGB not BGR
	for (int i = 0; i < width * height; ++i)
	{
		int index = i * 3;
		unsigned char B, R;
		B = data[index];
		R = data[index + 2];

		data[index] = R;
		data[index + 2] = B;

	}

	//load another texture image

	glGenTextures(1, &texture);            //generate the texture with the loaded data
	glBindTexture(GL_TEXTURE_2D, texture); //bind the texture to it's array

	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);

	free(data); //free the texture array

	if (glGetError() != GL_NO_ERROR)
		printf("GLError in genTexture()\n");

	return texture; //return whether it was successfull  
}
void project(double fov, double asp, double dim)
{
	Tex1 = LoadTexture(path1, 300, 300);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(fov, asp, dim / 4, 4 * dim);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

// drawShape()

void drawShape1()
{
	glBindTexture(GL_TEXTURE_2D, Tex1);
	glBegin(GL_TRIANGLES);           // Begin drawing the pyramid with 4 triangles

									 // Front
	glTexCoord2f(0, 0);  glVertex3f(0, 2, 0);
	glTexCoord2f(1, 0);  glVertex3f(-2, -2, 2);
	glTexCoord2f(0.5, 1);  glVertex3f(2, -2, 2);
	glEnd();
	glBegin(GL_TRIANGLES);
	// Right
	glTexCoord2f(0, 0); glVertex3f(0, 2, 0);
	glTexCoord2f(1, 0); glVertex3f(2, -2, 2);
	glTexCoord2f(0.5, 1); glVertex3f(2, -2, -2);
	glEnd();
	glBegin(GL_TRIANGLES);
	// Back
	glTexCoord2f(0, 0); glVertex3f(0, 2, 0);
	glTexCoord2f(1, 0); glVertex3f(2, -2, -2);
	glTexCoord2f(0.5, 1); glVertex3f(-2, -2, -2);
	glEnd();
	glBegin(GL_TRIANGLES);
	// Left
	glTexCoord2f(0, 0); glVertex3f(0, 2, 0);
	glTexCoord2f(1, 0); glVertex3f(-2, -2, -2);
	glTexCoord2f(0.5, 1); glVertex3f(-2, -2, 2);

	glEnd();   // Done drawing the pyramid


}

void drawShape()
{
	glBindTexture(GL_TEXTURE_2D, Tex1);
	glBegin(GL_TRIANGLES);           // Begin drawing the pyramid with 4 triangles

									 // Front
	glTexCoord2f(0, 0);  glVertex3f(0, 1, 0);
	glTexCoord2f(1, 0);  glVertex3f(-1, -1, 1);
	glTexCoord2f(0.5, 1);  glVertex3f(1, -1, 1);
	glEnd();
	glBegin(GL_TRIANGLES);
	// Right
	glTexCoord2f(0, 0); glVertex3f(0, 1, 0);
	glTexCoord2f(1, 0); glVertex3f(1, -1, 1);
	glTexCoord2f(0.5, 1); glVertex3f(1, -1, -1);
	glEnd();
	glBegin(GL_TRIANGLES);
	// Back
	glTexCoord2f(0, 0); glVertex3f(0, 1, 0);
	glTexCoord2f(1, 0); glVertex3f(1, -1, -1);
	glTexCoord2f(0.5, 1); glVertex3f(-1, -1, -1);
	glEnd();
	glBegin(GL_TRIANGLES);
	// Left
	glTexCoord2f(0, 0); glVertex3f(0, 1, 0);
	glTexCoord2f(1, 0); glVertex3f(-1, -1, -1);
	glTexCoord2f(0.5, 1); glVertex3f(-1, -1, 1);

	glEnd();   // Done drawing the pyramid


}

// Display the scene
void display()

{
	// Initializes display 
	glClearColor(0.9, 0.8, 0.6, 0.0); // BG color

									  // Clear the image 
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
	// Enable Z-buffering in OpenGL 
	glEnable(GL_DEPTH_TEST);
	// Reset previous transforms 
	glLoadIdentity();

	double zc = cos(PI*th / 180)*dim;
	double xc = sin(PI*th / 180)*dim;
	double yc = cos(PI*ph / 180)*dim;

	//camera/eye position, aim of camera lens, up-vector.
	gluLookAt(xc, yc, zc, ecX, ecY, ecZ, 0, 1, 0);

	//Draw 
	glPushMatrix();
	glTranslatef(1.0, 0.0, 2.0); // right
	glEnable(GL_TEXTURE_2D);
	glEnable(GL_DEPTH_TEST);
	drawShape();
	glDisable(GL_TEXTURE_2D);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-1.0, 0.1, 2.0); // center
	glEnable(GL_TEXTURE_2D);
	glEnable(GL_DEPTH_TEST);
	drawShape();
	glDisable(GL_TEXTURE_2D);
	glEnd();
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-3.0, 0.0, 2.0); // left
	glEnable(GL_TEXTURE_2D);
	glEnable(GL_DEPTH_TEST);
	drawShape();
	glDisable(GL_TEXTURE_2D);
	glPopMatrix();

	// back 
	glPushMatrix();
	glTranslatef(2.0, 0.0, -3.0); // left
	glEnable(GL_TEXTURE_2D);
	glEnable(GL_DEPTH_TEST);
	drawShape1();
	glDisable(GL_TEXTURE_2D);
	glEnd();
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-1.0, 0.0, -2.0); // center
	glEnable(GL_TEXTURE_2D);
	glEnable(GL_DEPTH_TEST);
	drawShape1();
	glDisable(GL_TEXTURE_2D);
	glEnd();
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-4.0, 0.0, -1.0); // right
	glEnable(GL_TEXTURE_2D);
	glEnable(GL_DEPTH_TEST);
	drawShape1();
	glDisable(GL_TEXTURE_2D);
	glEnd();
	glPopMatrix();

	glFlush();
	glutSwapBuffers();

}

// GLUT calls this routine when the window is resized
void reshape(int width, int height)
{
	asp = (height>0) ? (double)width / height : 1;
	glViewport(0, 0, width, height);
	project(fov, asp, dim);
}

// GLUT calls this routine when an arrow key is pressed
void windowKey(unsigned char key, int x, int y)
{
	// Exit on ESC 
	if (key == 27) exit(0);
	// Change dimensions
	else if (key == '-')dim += 0.1;
	else if (key == '+' && dim>1)dim -= 0.1;

	reshape(1000, 1000);
	glutPostRedisplay();
}
void windowSpecial(int key, int x, int y)
{
	int modifiers = glutGetModifiers();

	//  Right/Left - rotate 
	if (key == GLUT_KEY_RIGHT)
		th += 5;
	else if (key == GLUT_KEY_LEFT)
		th -= 5;

	//  Keep angles to +/-360 degrees 
	th %= 360;
	ph %= 360;

	reshape(1000, 1000);
	glutPostRedisplay();
}

int main(int argc, char* argv[])
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
	glutInitWindowSize(1000, 1000);
	glutCreateWindow("PYRAMID");
	glutInitWindowPosition(500, 800);
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutKeyboardFunc(windowKey);
	glutSpecialFunc(windowSpecial);

	glutMainLoop();
	return 0;
}