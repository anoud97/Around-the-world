/**** Asiignment#2: Camera Control ****/
#define _CRT_SECURE_NO_WARNINGS
#include <gl/glew.h>  // A cross-platform open-source C/C++ extension loading library
#include <stdlib.h>
#include <gl/freeglut.h>   // Handle the window-managing operations
#include <iostream>
#include <conio.h>

using namespace std;


#include <math.h>

bool bFullscreen = false;  // variable to toggle for fullscreen


GLUquadric * quadric;
GLfloat x_axis, y_axis, z_axis;

GLfloat light_ambient[] = { 0.0f, 0.0f, 0.0f, 1.0f };
GLfloat light_diffuse[] = { 1.0f, 1.0f, 1.0f, 1.0f };
GLfloat light_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
GLfloat light_position[] = { 0.0f, 2.0f, -5.0f, 0.0f };

GLfloat material_diffuse[] = { 1.0f, 1.0f, 1.0f, 1.0f };
GLfloat material_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
GLfloat material_shiniess[] = { 50.0f };
#define M_PI 3.14

GLuint myTexture1;
GLuint myTexture2;
GLuint myTexture3;

char image1Path[] = "C:/Users/hp/source/repos/Project1/dome.bmp";
char image1Path2[] = "C:/Users/hp/source/repos/Project1/top.bmp";
char image1Path3[] = "C:/Users/hp/source/repos/Project1/bottom.bmp";


GLuint LoadTexture(const char * filename, int width, int height)
{
	GLuint texture;
	unsigned char * data;
	FILE * file;

	//The following code will read in our RAW file
	file = fopen(filename, "rb");

	if (file == NULL)
	{
		cout << "Unable to open the image file" << endl << "Program will exit :(" << endl;
		exit(0);
		return 0;
	}

	data = (unsigned char *)malloc(width * height * 3);
	fread(data, width * height * 3, 1, file);

	fclose(file);


	// reorder the image colors to RGB not BGR
	for (int i = 0; i < width * height; ++i)
	{
		int index = i * 3;
		unsigned char B, R;
		B = data[index];
		R = data[index + 2];

		data[index] = R;
		data[index + 2] = B;

	}

	glGenTextures(1, &texture);            //generate the texture with the loaded data
	glBindTexture(GL_TEXTURE_2D, texture); //bind the texture to it's array
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);


	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);

	/////////////////////////////////////////

	free(data); //free the texture array

	if (glGetError() != GL_NO_ERROR)
		printf("GLError in genTexture()\n");

	return texture; //return whether it was successfull  
}

void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glTranslatef(0.0f, 0.0f, -8.0f);
	glTranslatef(x_axis, y_axis, z_axis);
	static GLfloat angle = 0.0f;

	glRotatef(angle, 0.0, 1.0, 0.0);
	angle += 0.2f;
	if (angle >= 360)
		angle = 0.0f;


	glLightfv(GL_LIGHT0, GL_POSITION, light_position);

	glBindTexture(GL_TEXTURE_2D, myTexture1);
	glTranslatef(0.0, -2.0, 0.0);
	glBegin(GL_QUADS);

	glTexCoord2f(1.0f, 1.0f);

	glVertex3f(2.0f, 1.2f, 3.46f); // right-top

	glTexCoord2f(0.0f, 1.0f);

	glVertex3f(-2.0f, 1.2f, 3.46f); // left-top

	glTexCoord2f(0.0f, 0.0f);

	glVertex3f(-2.0f, -1.2f, 3.46f); // left-bottom

	glTexCoord2f(1.0f, 0.0f);
	glNormal3f(0.0, 0.0, 1.0f);
	glVertex3f(2.0f, -1.2f, 3.46f); // right-bottom

									/***************/

	glTexCoord2f(1.0f, 1.0f);
	glVertex3f(-2.0f, 1.2f, 3.46f); // right-top

	glTexCoord2f(0.0f, 1.0f);
	glVertex3f(-4.0f, 1.2f, 0.0f); // left-top

	glTexCoord2f(0.0f, 0.0f);
	glVertex3f(-4.0f, -1.2f, 0.0f); // left-bottom

	glTexCoord2f(1.0f, 0.0f);
	glVertex3f(-2.0f, -1.2f, 3.46f); // right-bottom

									 /*******************/
	glTexCoord2f(1.0f, 1.0f);
	glVertex3f(-4.0f, 1.2f, 0.0f); // right-top

	glTexCoord2f(0.0f, 1.0f);
	glVertex3f(-2.0f, 1.2f, -3.46f); // left-top

	glTexCoord2f(0.0f, 0.0f);
	glVertex3f(-2.0f, -1.2f, -3.46f); // left-bottom

	glTexCoord2f(1.0f, 0.0f);
	glVertex3f(-4.0f, -1.2f, 0.0f); // right-bottom

									/********************/

	glTexCoord2f(1.0f, 1.0f);
	glNormal3f(0.0, 0.0, -1.0f);
	glVertex3f(-2.0f, 1.2f, -3.46f); // right-top

	glTexCoord2f(0.0f, 1.0f);
	glNormal3f(0.0, 0.0, -1.0f);

	glVertex3f(2.0f, 1.2f, -3.46f); // left-top

	glTexCoord2f(0.0f, 0.0f);
	glNormal3f(0.0, 0.0, -1.0f);
	glVertex3f(2.0f, -1.2f, -3.46f); // left-bottom

	glTexCoord2f(1.0f, 0.0f);
	glNormal3f(0.0, 0.0, -1.0f);
	glVertex3f(-2.0f, -1.2f, -3.46f); // right-bottom

									  /********************/

	glTexCoord2f(1.0f, 1.0f);
	glVertex3f(2.0f, 1.2f, -3.46f); // right-top

	glTexCoord2f(0.0f, 1.0f);
	glVertex3f(4.0f, 1.2f, 0.0f); // left-top

	glTexCoord2f(0.0f, 0.0f);
	glVertex3f(4.0f, -1.2f, 0.0f); // left-bottom

	glTexCoord2f(1.0f, 0.0f);
	glVertex3f(2.0f, -1.2f, -3.46f); // right-bottom

									 /*********************/

	glTexCoord2f(1.0f, 1.0f);
	glVertex3f(4.0f, 1.2f, 0.0f); // right-top

	glTexCoord2f(0.0f, 1.0f);
	glVertex3f(2.0f, 1.2f, 3.46f); // left-top

	glTexCoord2f(0.0f, 0.0f);
	glVertex3f(2.0f, -1.2f, 3.46f); // left-bottom

	glTexCoord2f(1.0f, 0.0f);
	glVertex3f(4.0f, -1.2f, 0.0f); // right-bottom

	glEnd();

	glBindTexture(GL_TEXTURE_2D, myTexture3);
	glBegin(GL_TRIANGLES);

	glTexCoord2f(0.0f, 0.0f);

	glVertex3f(-2.0f, 1.2f, 3.46f);

	glTexCoord2f(0.5f, 1.0f);

	glVertex3f(0.0f, 1.3f, 0.0f);

	glTexCoord2f(1.0f, 0.0f);

	glVertex3f(2.0f, 1.2f, 3.46f);

	/************************/

	glTexCoord2f(0.0f, 0.0f);

	glVertex3f(-4.0f, 1.2f, 0.0f);

	glTexCoord2f(0.5f, 1.0f);

	glVertex3f(0.0f, 1.3f, 0.0f);

	glTexCoord2f(1.0f, 0.0f);

	glVertex3f(-2.0f, 1.2f, 3.46f);

	/***********************/

	glTexCoord2f(0.0f, 0.0f);

	glVertex3f(-2.0f, 1.2f, -3.46f);

	glTexCoord2f(0.5f, 1.0f);

	glVertex3f(0.0f, 1.3f, 0.0f);

	glTexCoord2f(1.0f, 0.0f);

	glVertex3f(-4.0f, 1.2f, 0.0f);

	/************************/

	glTexCoord2f(0.0f, 0.0f);

	glVertex3f(2.0f, 1.2f, -3.46f);

	glTexCoord2f(0.5f, 1.0f);

	glVertex3f(0.0f, 1.3f, 0.0f);

	glTexCoord2f(1.0f, 0.0f);

	glVertex3f(-2.0f, 1.2f, -3.46f);

	/*************************/

	glTexCoord2f(0.0f, 0.0f);

	glVertex3f(4.0f, 1.2f, 0.0f);

	glTexCoord2f(0.5f, 1.0f);

	glVertex3f(0.0f, 1.3f, 0.0f);

	glTexCoord2f(1.0f, 0.0f);

	glVertex3f(2.0f, 1.2f, -3.46f);

	/************************/

	glTexCoord2f(0.0f, 0.0f);

	glVertex3f(2.0f, 1.2f, 3.46f);

	glTexCoord2f(0.5f, 1.0f);

	glVertex3f(0.0f, 1.3f, 0.0f);

	glTexCoord2f(1.0f, 0.0f);

	glVertex3f(4.0f, 1.2f, 0.0f);

	glEnd();

	glTranslatef(0.0, 2.5f, 0.0f);
	glRotatef(90.0, 1.0f, 0.0f, 0.0f);


	glBindTexture(GL_TEXTURE_2D, myTexture2);
	gluQuadricDrawStyle(quadric, GLU_FILL);
	gluQuadricTexture(quadric, GLU_TRUE);
	gluQuadricNormals(quadric, GLU_SMOOTH);
	glPolygonMode(GL_FRONT, GL_FILL);
	gluQuadricOrientation(quadric, GLU_OUTSIDE);
	glTexGeni(GL_S, GL_TEXTURE_GEN_MODE, GL_OBJECT_LINEAR);
	glEnable(GL_TEXTURE_GEN_S);
	gluCylinder(quadric, 1.8f, 1.8f, 1.5f, 20, 100);
	glDisable(GL_TEXTURE_GEN_S);
	glDisable(GL_TEXTURE_GEN_T);


	glDisable(GL_TEXTURE_2D);

	int scalex = 32;
	int scaley = 32;
	float r = 1;

	int i, j;
	GLfloat** v = new GLfloat*[scalex*scaley];
	for (int k = 0; k < (scalex*scaley); k++)
		v[k] = new GLfloat[3];

	for (i = 0; i < scalex; ++i)
	{
		for (j = 0; j < scaley; ++j)
		{
			v[i*scaley + j][0] = r * cos(j * 2 * M_PI / scaley) * cos(i * M_PI / (2 * scalex));
			v[i*scaley + j][1] = r * sin(i * M_PI / (2 * scalex));
			v[i*scaley + j][2] = r * sin(j * 2 * M_PI / scaley) * cos(i*M_PI / (2 * scalex));
		}
	}
	glPushMatrix();
	glColor3ub(223, 168, 69);
	glTranslatef(0.0, 0.0, 0.0);
	glRotatef(90.0, -1.0, 0.0, 0.0);
	glScalef(1.8f, 1.8f, 1.8f);

	glBegin(GL_QUADS);
	for (i = 0; i < scalex - 1; i++)
	{
		for (j = 0; j < scaley; j++)
		{
			glNormal3fv(v[i*scaley + j]);
			glVertex3fv(v[i*scaley + j]);
			glVertex3fv(v[i*scaley + (j + 1) % scaley]);
			glVertex3fv(v[(i + 1)*scaley + (j + 1) % scaley]);
			glVertex3fv(v[(i + 1) * scaley + j]);
		}
	}
	glEnd();

	glPopMatrix();
	glColor3f(1.0, 1.0f, 1.0f);

	for (int k = 0; k < (scalex * scaley); k++)
		delete[] v[k];
	delete[]v;

	glEnable(GL_TEXTURE_2D);
	glutSwapBuffers();
	glutPostRedisplay();

}


void initialize(void)
{
	glClearColor(0.0, 0.0, 0.0, 0.0);

	quadric = gluNewQuadric();

	glEnable(GL_DEPTH_TEST);
	glEnable(GL_TEXTURE_2D);

	myTexture1 = LoadTexture(image1Path, 500, 334);
	myTexture2 = LoadTexture(image1Path2, 1000, 1000);
	myTexture3 = LoadTexture(image1Path3, 300, 300);

	glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);
	glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
	glLightfv(GL_LIGHT0, GL_POSITION, light_position);

	glMaterialfv(GL_FRONT, GL_SPECULAR, material_specular);
	glMaterialfv(GL_FRONT, GL_SHININESS, material_shiniess);

	glEnable(GL_LIGHT0);
}

void SpecialInput(int key, int x, int y)
{
	switch (key)
	{
	case GLUT_KEY_UP:
		y_axis += 0.2;
		break;

	case GLUT_KEY_DOWN:
		y_axis -= 0.2;
		break;

	case GLUT_KEY_RIGHT:
		x_axis += 0.2f;
		break;

	case GLUT_KEY_LEFT:
		x_axis -= 0.2f;
		break;
	default:
		break;
	}
}

void keyboard(unsigned char key, int x, int y)
{
	switch (key)
	{
	case 27:
		glutLeaveMainLoop();
		break;

	case 'z':
		z_axis += 0.2f;
		break;

	case 's':
		z_axis -= 0.2f;
		break;

	case 'F':
	case 'f':
		if (bFullscreen == false)
		{
			glutFullScreen();
			bFullscreen = true;
		}
		else
		{
			glutLeaveFullScreen();
			bFullscreen = false;
		}
		break;

	default:
		break;
	}
}

void mouse(int button, int state, int x, int y)
{
	switch (button)
	{
	case GLUT_LEFT_BUTTON:
		break;
	default:
		break;
	}
}

void resize(int width, int height)
{
	if (height == 0)
		height = 1;
	glViewport(0, 0, width, height);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	gluPerspective(80.0f, (GLfloat)width / (GLfloat)height, 0.1f, 100.0f);

}
int main(int argc, char** argv)
{
	// function prototypes
	void display(void);
	void resize(int, int);
	void keyboard(unsigned char, int, int);
	void mouse(int, int, int, int);
	void initialize(void);
	void uninitialize(void);
	void SpecialInput(int key, int x, int y);

	glutInit(&argc, argv);

	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);

	glutInitWindowSize(800, 600);  //to declare initial window size
	glutInitWindowPosition(100, 100);
	glutCreateWindow("Dome of Rock.");

	initialize();

	glutDisplayFunc(display);
	glutReshapeFunc(resize);
	glutKeyboardFunc(keyboard);
	glutSpecialFunc(SpecialInput);

	glutMouseFunc(mouse);


	glutMainLoop();
}