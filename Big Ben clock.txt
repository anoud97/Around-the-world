#include <GL\glew.h>
#include <GL\freeglut.h>
#include <stdlib.h>
#include <iostream>
#include <conio.h>

using namespace std;

double dim = 4.0;
const char *windowName = "Big Ben ;)";
int windowWidth = 550;
int windowHeight = 550;

int fov = 50;       //Field of view angle
int asp = 1;        //aspect ratio

GLuint myTexture1;
GLuint myTexture2;
GLuint myTexture3;

char image1Path[] = "C:/Users/hp/source/repos/Project1/Wall.bmp";
char image2Path[] = "C:/Users/hp/source/repos/Project1/ClockFace.bmp";
char image3Path[] = "C:/Users/hp/source/repos/Project1/Roof.bmp";

void project(double fov, double asp, double dim)
{
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(60, 1, 4, 20);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(10.0, 11.0, 10.0, 0.0, 5.0, 0.0, 0.0, 1.0, 0.0);
}

GLuint LoadTexture(const char * filename, int width, int height)
{
	GLuint texture;
	unsigned char * data;
	FILE * file;

	//The following code will read in our RAW file
	fopen_s(&file, filename, "rb");

	if (file == NULL)
	{
		cout << "Unable to open the image file" << endl << "Program will exit :(" << endl;
		exit(0);
		return 0;
	}

	data = (unsigned char *)malloc(width * height * 3);
	fread(data, width * height * 3, 1, file);
	fclose(file);

	// reorder the image colors to RGB not BGR
	for (int i = 0; i < width * height; ++i)
	{
		int index = i * 3;
		unsigned char B, R;
		B = data[index];
		R = data[index + 2];

		data[index] = R;
		data[index + 2] = B;
	}

	glGenTextures(1, &texture);            //generate the texture with the loaded data
	glBindTexture(GL_TEXTURE_2D, texture); //bind the texture to it's array

	glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE); //set texture environment parameters

	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);

	free(data); //free the texture array

	if (glGetError() != GL_NO_ERROR)
		printf("GLError in genTexture()\n");

	return texture; //return whether it was successfull  
}

void init()
{
	myTexture1 = LoadTexture(image1Path, 300, 500); // Texture 1, building wall
	if (myTexture1 == -1)
		cout << "Error in loading the texture" << endl;
	else
		cout << "The texture value is: " << myTexture1 << endl;

	myTexture2 = LoadTexture(image2Path, 500, 500); // Texture 2, clock face
	if (myTexture2 == -1)
		cout << "Error in loading the texture" << endl;
	else
		cout << "The texture value is: " << myTexture2 << endl;

	myTexture3 = LoadTexture(image3Path, 280, 280); // Texture 3, roof top
	if (myTexture3 == -1)
		cout << "Error in loading the texture" << endl;
	else
		cout << "The texture value is: " << myTexture3 << endl;

	glClearColor(0.70f, 0.70f, 0.70f, 1.0f); // Set background color to black and opaque

	glMatrixMode(GL_PROJECTION);
	gluPerspective(65, (windowWidth / windowHeight), 0.01, 50);

	glMatrixMode(GL_MODELVIEW);
	gluLookAt(5, 5, 5, 0, 0, 0, 0, 1, 0);
}

void DrawTower()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glEnable(GL_TEXTURE_2D);

	//building bottom
	glPushMatrix();
	//top
	glBindTexture(GL_TEXTURE_2D, myTexture1);
	glBegin(GL_QUADS);
	glTexCoord2f(0.0, 0.0); glVertex3f(-2.0f, 4.0f, 2.0f);
	glTexCoord2f(1.0, 0.0); glVertex3f(2.0f, 4.0f, 2.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(2.0f, 4.0f, -2.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(-2.0f, 4.0f, -2.0f);
	glEnd();
	//front
	glBindTexture(GL_TEXTURE_2D, myTexture1);
	glBegin(GL_QUADS);
	glTexCoord2f(0.0, 1.0); glVertex3f(2.0f, -4.0f, 2.0f);
	glTexCoord2f(0.0, 0.0); glVertex3f(2.0f, 4.0f, 2.0f);
	glTexCoord2f(1.0, 0.0); glVertex3f(-2.0f, 4.0f, 2.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(-2.0f, -4.0f, 2.0f);
	glEnd();
	//right
	glBegin(GL_QUADS);
	glBindTexture(GL_TEXTURE_2D, myTexture1);
	glTexCoord2f(0.0, 0.0); glVertex3f(2.0f, 4.0f, -2.0f);
	glTexCoord2f(1.0, 0.0); glVertex3f(2.0f, 4.0f, 2.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(2.0f, -4.0f, 2.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(2.0f, -4.0f, -2.0f);
	glEnd();
	//left
	glBindTexture(GL_TEXTURE_2D, myTexture1);
	glBegin(GL_QUADS);
	glTexCoord2f(1.0, 0.0); glVertex3f(-2.0f, -4.0f, 2.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(-2.0f, 4.0f, 2.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(-2.0f, 4.0f, -2.0f);
	glTexCoord2f(0.0, 0.0); glVertex3f(-2.0f, -4.0f, -2.0f);
	glEnd();
	//bottom
	glBindTexture(GL_TEXTURE_2D, myTexture1);
	glBegin(GL_QUADS);
	glTexCoord2f(0.0, 0.0); glVertex3f(2.0f, -4.0f, 2.0f);
	glTexCoord2f(1.0, 0.0); glVertex3f(-2.0f, -4.0f, 2.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(-2.0f, -4.0f, -2.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(2.0f, -4.0f, -2.0f);
	glEnd();
	//back
	glBindTexture(GL_TEXTURE_2D, myTexture1);
	glBegin(GL_QUADS);
	glTexCoord2f(1.0, 0.0); glVertex3f(2.0f, 4.0f, -2.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(2.0f, -4.0f, -2.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(-2.0f, -4.0f, -2.0f);
	glTexCoord2f(0.0, 0.0); glVertex3f(-2.0f, 4.0f, -2.0f);
	glEnd();
	glPopMatrix();

	//building middle (clock)
	glPushMatrix();
	glTranslatef(0.0, 5.0, 0.0);
	glScalef(1.2, 1.2, 1.2);
	//top
	glBindTexture(GL_TEXTURE_2D, myTexture1);
	glBegin(GL_QUADS);
	glTexCoord2f(0.0, 0.0); glVertex3f(-2.0f, 2.0f, 2.0f);
	glTexCoord2f(1.0, 0.0); glVertex3f(2.0f, 2.0f, 2.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(2.0f, 2.0f, -2.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(-2.0f, 2.0f, -2.0f);
	glEnd();
	//front
	glBindTexture(GL_TEXTURE_2D, myTexture2);
	glBegin(GL_QUADS);
	glTexCoord2f(0.0, 0.0); glVertex3f(2.0f, -2.0f, 2.0f);
	glTexCoord2f(1.0, 0.0); glVertex3f(2.0f, 2.0f, 2.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(-2.0f, 2.0f, 2.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(-2.0f, -2.0f, 2.0f);
	glEnd();
	//right
	glBindTexture(GL_TEXTURE_2D, myTexture2);
	glBegin(GL_QUADS);
	glTexCoord2f(1.0, 0.0); glVertex3f(2.0f, 2.0f, -2.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(2.0f, 2.0f, 2.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(2.0f, -2.0f, 2.0f);
	glTexCoord2f(0.0, 0.0); glVertex3f(2.0f, -2.0f, -2.0f);
	glEnd();
	//left
	glBindTexture(GL_TEXTURE_2D, myTexture2);
	glBegin(GL_QUADS);
	glTexCoord2f(0.0, 0.0); glVertex3f(-2.0f, -2.0f, 2.0f);
	glTexCoord2f(1.0, 0.0); glVertex3f(-2.0f, 2.0f, 2.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(-2.0f, 2.0f, -2.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(-2.0f, -2.0f, -2.0f);
	glEnd();
	//bottom
	glBindTexture(GL_TEXTURE_2D, myTexture1);
	glBegin(GL_QUADS);
	glTexCoord2f(0.0, 0.0); glVertex3f(2.0f, -2.0f, 2.0f);
	glTexCoord2f(1.0, 0.0); glVertex3f(-2.0f, -2.0f, 2.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(-2.0f, -2.0f, -2.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(2.0f, -2.0f, -2.0f);
	glEnd();
	//back
	glBindTexture(GL_TEXTURE_2D, myTexture2);
	glBegin(GL_QUADS);
	glTexCoord2f(1.0, 1.0); glVertex3f(2.0f, 2.0f, -2.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(2.0f, -2.0f, -2.0f);
	glTexCoord2f(0.0, 0.0); glVertex3f(-2.0f, -2.0f, -2.0f);
	glTexCoord2f(1.0, 0.0); glVertex3f(-2.0f, 2.0f, -2.0f);
	glEnd();
	glPopMatrix();

	//building top
	glPushMatrix();
	glTranslatef(0.0, 8.0, 0.0);
	//base
	glBindTexture(GL_TEXTURE_2D, myTexture1);
	glBegin(GL_QUADS);
	glTexCoord2f(0.0, 0.0); glVertex3f(-2.0f, 0.5f, 2.0f);
	glTexCoord2f(1.0, 0.0); glVertex3f(2.0f, 0.5f, 2.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(2.0f, 0.5f, -2.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(-2.0f, 0.5f, -2.0f);
	glEnd();
	//front
	glBindTexture(GL_TEXTURE_2D, myTexture1);
	glBegin(GL_QUADS);
	glTexCoord2f(1.0, 0.0); glVertex3f(2.0f, -0.5f, 2.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(2.0f, 0.5f, 2.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(-2.0f, 0.5f, 2.0f);
	glTexCoord2f(0.0, 0.0); glVertex3f(-2.0f, -0.5f, 2.0f);
	glEnd();
	//right
	glBindTexture(GL_TEXTURE_2D, myTexture1);
	glBegin(GL_QUADS);
	glTexCoord2f(0.0, 0.0); glVertex3f(2.0f, 0.5f, -2.0f);
	glTexCoord2f(1.0, 0.0); glVertex3f(2.0f, 0.5f, 2.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(2.0f, -0.5f, 2.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(2.0f, -0.5f, -2.0f);
	glEnd();
	//left
	glBindTexture(GL_TEXTURE_2D, myTexture1);
	glBegin(GL_QUADS);
	glTexCoord2f(1.0, 0.0); glVertex3f(-2.0f, -0.5f, 2.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(-2.0f, 0.5f, 2.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(-2.0f, 0.5f, -2.0f);
	glTexCoord2f(0.0, 0.0); glVertex3f(-2.0f, -0.5f, -2.0f);
	glEnd();
	//bottom
	glBindTexture(GL_TEXTURE_2D, myTexture1);
	glBegin(GL_QUADS);
	glTexCoord2f(0.0, 0.0); glVertex3f(2.0f, -0.5f, 2.0f);
	glTexCoord2f(1.0, 0.0); glVertex3f(-2.0f, -0.5f, 2.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(-2.0f, -0.5f, -2.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(2.0f, -0.5f, -2.0f);
	glEnd();
	//back
	glBindTexture(GL_TEXTURE_2D, myTexture1);
	glBegin(GL_QUADS);
	glTexCoord2f(1.0, 0.0); glVertex3f(2.0f, 0.5f, -2.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(2.0f, -0.5f, -2.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(-2.0f, -0.5f, -2.0f);
	glTexCoord2f(0.0, 0.0); glVertex3f(-2.0f, 0.5f, -2.0f);
	glEnd();
	glPopMatrix();

	//building pyramid roof
	glPushMatrix();
	glTranslatef(0.0, 10.4, 0.0);
	glScalef(2.0, 2.0, 2.0);
	//front
	glBindTexture(GL_TEXTURE_2D, myTexture3);
	glBegin(GL_TRIANGLES);
	glTexCoord2f(1.0, 0.0); glVertex3f(0.0f, 1.0f, 0.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(-1.0f, -1.0f, 1.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(1.0f, -1.0f, 1.0f);
	glEnd();
	//right
	glBindTexture(GL_TEXTURE_2D, myTexture3);
	glBegin(GL_TRIANGLES);
	glTexCoord2f(1.0, 0.0); glVertex3f(0.0f, 1.0f, 0.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(1.0f, -1.0f, 1.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(1.0f, -1.0f, -1.0f);
	glEnd();
	//back
	glBindTexture(GL_TEXTURE_2D, myTexture3);
	glBegin(GL_TRIANGLES);
	glTexCoord2f(1.0, 0.0); glVertex3f(0.0f, 1.0f, 0.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(1.0f, -1.0f, -1.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(-1.0f, -1.0f, -1.0f);
	glEnd();
	//left
	glBindTexture(GL_TEXTURE_2D, myTexture3);
	glBegin(GL_TRIANGLES);
	glTexCoord2f(1.0, 0.0); glVertex3f(0.0f, 1.0f, 0.0f);
	glTexCoord2f(1.0, 1.0); glVertex3f(-1.0f, -1.0f, -1.0f);
	glTexCoord2f(0.0, 1.0); glVertex3f(-1.0f, -1.0f, 1.0f);
	glEnd();
	glPopMatrix();

	glDisable(GL_TEXTURE_2D);
}

void display()
{
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT); //Clear the image
	glEnable(GL_DEPTH_TEST); //Enable Z-buffering in OpenGL
	glLoadIdentity(); //Reset previous transforms

	project(fov, asp, dim);

	DrawTower();

	glFlush();
	glutSwapBuffers();
}

void reshape(int width, int height)
{
	asp = (height>0) ? (double)width / height : 1;
	glViewport(0, 0, width, height);
	project(fov, asp, dim);
}

int main(int argc, char* argv[])
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
	glutInitWindowSize(windowWidth, windowHeight);
	glutCreateWindow(windowName);

	init();

	glutDisplayFunc(display);
	glutReshapeFunc(reshape);

	glutMainLoop();
	return 0;
}